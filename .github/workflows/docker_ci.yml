name: Deploy to AWS EC2 with Docker

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      env:
        INFLUXDB_INIT_USERNAME: ${{ secrets.INFLUXDB_INIT_USERNAME }}
        INFLUXDB_INIT_PASSWORD: ${{ secrets.INFLUXDB_INIT_PASSWORD }}
        INFLUXDB_INIT_ADMIN_TOKEN: ${{ secrets.INFLUXDB_INIT_ADMIN_TOKEN }}
        INFLUXDB_INIT_ORG: ${{ secrets.INFLUXDB_INIT_ORG }}
        INFLUXDB_INIT_BUCKET: ${{ secrets.INFLUXDB_INIT_BUCKET }}
        NWS_BASE_URL: ${{ secrets.NWS_BASE_URL }}
        APP_BASE_URL: ${{ secrets.APP_BASE_URL }}
        INFLUXDB_HOST_URL: ${{ secrets.INFLUXDB_HOST_URL }}
      run: |
        pytest tests

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: test   # Ensure tests pass before deploying

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Connect to EC2 and deploy Docker containers
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
        
        # Navigate to deployment directory
        mkdir -p ~/flask-influx
        cd ~/flask-influx

        # Pull the latest changes
        git clone https://github.com/swapnilwagh2204/CDAO-TAKE-HOME.git || (cd CDAO-TAKE-HOME && git pull)

        # Navigate to the repo
        cd CDAO-TAKE-HOME

        # Build and run Docker containers  
        docker-compose --env-file /home/${{ secrets.EC2_USER }}/.env -f docker-compose-flask.yml up --build -d
        docker-compose --env-file /home/${{ secrets.EC2_USER }}/.env -f docker-compose-influxdb.yml up --build -d

        # Cleanup old dangling images
        docker image prune -f

        EOF

    - name: Verify deployment
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
        docker ps
        EOF
